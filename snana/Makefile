# $Source: /cvs/sdss/snana/src/Makefile,v $
# $Revision: 1.500 $    Last Modified: $Date: 2019/05/02 20:24:47 $
#
#  R.Kessler    
#
#  HISTORY 
# -----------------------------------
# Apr 07, 2012: add genSmear_models.c[.o]
#
# Jun 18, 2012: add public psnid based on pnsid.cra (with snana interface)
#
# Jul 25, 2012: added $PSNID_OBJECTS
#               Remove *.f90 from list
#
# Oct 18, 2012: psnid.cra -> psnid.cra and psnid.car  to have same
#               structre and snana and snlc_fit.
#
# Oct 23, 2012: remove SDSS_xxx programs from Make
#
# Dec 19, 2012: 
#    - for FNAL, use BITNESS to determine 32- or 64-bit version of
#      libraries. For non-FNAL use $(PRODUCT)/lib
#    - General cleanup and organization
#    - Fix 'make ../bin/psnid.exe' to work after 'make clean'
#
# Jan 09, 2013: add -lpthread link flag.
#
# Jan 31, 2013:  
#      snfitsio -> sntools_fitsio
#      remove $(OBJ)/human_search_eff.o 
#
# Feb 2, 2013: 
#   - compile and link to sntools_output
#   - remove 'make_resids.exe', which is broken anyway
#   - link combine_fitres.exe to sntools_output.o
#
# Feb 20, 2013: lots of tweaks to prepare for CC = c++ .
#
# Apr  2, 2013: require LMINUIT for linking snana.exe and snlc_fit.exe
# Apr 15, 2013: add sntools_nearnbr
# Apr 20, 2013: add sntable_dump.exe
# Apr 26, 2013: eigen.f -> sntools_eigen.F
# May 02, 2013: add merge_hboook.exe (eventually to replace hmerge.exe)
# May 07, 2013: remove hmerge
# Sep 21, 2013: link a few more program to MWgaldust.o since 
#                GALextinct is there.
#
# Jan 17, 2014: compile sntools_trigger.o
# Feb  2, 2014: fix psnid dependencies to allow 
#                    "make clean ; make ../psnid.exe"
# Mar  2, 2014: add a few needed 'sndata.h' dependences.
#
# Apr 17, 2014: 
#   - add fcasplit from cernlib (from D.Cinabro) and use
#     $(SNANA_DIR//bin/fcasplit rather than CERNLIB's fcasplit.
#   - use local ypatchy.pl instead of CERNLIB's ypatchy.
#
# Apr 27 2014:
#   Define OBJ_OUTPUT = sntools_output.o + libsnana.a, where the latter
#   contains wrapper FORCLOSE(LUN) called by CLOSE_HFILE. This is needed
#   only to close a read-only file before the end of a program.
#
# May 27 2014: m64 is default instead of m64
#
# Aug 20 2014: compile with sntools_imageNoiseModels.c
#
# Sep 30 2014: add $(LROOT) to a few more programs since all of the
#              fitres-ascii code is uner sntools_output_text.c
#
# Dec 17 2014: 
#  check CERN_DIR and ROOT_DIR to internally set  USE_HBOOK and USE_ROOT.
#  Also call defineOutputFlags.pl to set C pre-processor flags.
#  User no longer has to manually edit files to select HBOOK,ROOT.
#
# Feb 19, 2015: remove SNANA_DIR dependence so that make works 
#               without SNANA_DIR defined.
#
#               Replace LMINUIT with $(OBJ)/minuit.o (see minuit.F)
#               so that we don't need the external MINUIT lib.
#
# Oct 28 2015: compile/link  sntools_fluxErrModel
#
# Mar 14 2016: compile genmag_NON1AGRID.o for simulation.
#              Separate OBJ_GENMAGS -> OBJ_GENMAG_FIT and OBJ_GENMAG_SIM.  
#
# Apr 26 2016: compile sntools_nonlinearity.c
#
# Jul 2 2016: add sntools_spectrograph
# Sep 2 2016: 
#   + add sntools_genGauss_asym.o  
#   + define USE_PYTHON based on $SNANA_PYTHON_DIR 
#         [E.Jennings figured out how to call python from C]
#
# Jan 6 2017: add sntable_combine.c
#
# Apr 15 2017: add sntools_lensing.o to simulation
# Aug 17 2017: add sntools_devel.o for simulation
#
# Feb 12 2018: 
#  + remove sntools_imageNoiseModels
#  + add sntools_fluxErrModels_legacy
#
# May 31 2018: add SIMSED_rebin
# Jul 28 2018: remove SIMSED_prep.exe, and add SIMSED_check.exe
# Sep 16 2018: include new BYOSED model
# Dec 05 2018: define LPY and IPY to comile/link sim with python code
#              Add *.py to list of install files.
#
# Jan 11, 2019: add -lstdc++ into link for SALT2mu
#
# Apr 5 2019: replace defineOutputFlags.pl with  set_Cpreproc_flags.py
#             (includes check on USE_BYOSED ENV)
#
# Apr 11 2019: fix LPY to work on Midway using miniConda
# Apr 30 2019: 
#   + add -lpython3.7m to LPY
#   + genmag_BYOSED linked only to sim (not to fitter)
#
# May 3 2019: create blank subDirs (OBJ,LIB,BIN) that are not in Git.
# Jun 19 2019: include psnid_BEST2.c
# Jul 27 2019: compile to inoue_igm.c (to correct spectral flux for igm)
# Oct 22 2019: compile with -O2 to speed sim with genSmear Cholesky stuff.
#               (-O3 doesn't help)
#
# Mar 20 2020: added sntools_genExpHalfGauss (DJB)
# Mar 23 2020: include snlc_sim.h dependence for sntools_gridgen.o
# Apr 25 2020: include lCint for LROOT only of libCint.so exists
# Jun 12 2020: add sntools_genPDF
# Sep 10 2020: BYOSED renamed to more generic PySEDMODEL
# ---------------------------------------------------------------------

SHELL = /bin/sh

INSTALL_DIR = $(SNANA_INSTALL_DIR)/src
INSTALL_FILES = *.c  *.cc  *.car  *.cra  *.F  *.h  *.py PUBLIC.LIST Makefile

BITNESS = $(shell uname -p)
OSNAME  = $(shell uname -s)

# Ubuntu returns unknown for uname -p, so fall back to uname -m
ifeq ($(BITNESS), unknown)
   BITNESS = $(shell uname -m)
endif


# ================================

FFC  = gfortran
CC   = cc

EXTRA_FLAGS = -O1   # -ftree-vectorize -ftree-vectorizer-verbose=2

# EXTRA_FLAGS = -O2 -Wall
#  EXTRA_FLAGS = -g -fbounds-check  # valgrind --leak-check=full 

  PROFILEFLAG = 

# after running code with -pg, "gprof $SNANA_DIR/bin/[code].exe"
#  PROFILEFLAG = -pg
# ------------------------
# compile default storage options for both ROOT and HBOOK ....
USE_ROOT   = 1
USE_HBOOK  = 1

# ... unless the product is not installed.
ifndef CERN_DIR
   USE_HBOOK = 0
endif

ifndef ROOT_DIR
   USE_ROOT = 0
endif


# ------------------------------------------
# default lib-subdir name is just 'lib'.
   LIB_SDIR  = lib

# --------------------------
# Check for lib dir with BITNESS as part of name (as done at FNAL)
# Pick TESTFILE to be one library in CERN_DIR/lib$BITNESS; 
# if it exists then assume that all product libraries are in 
# ${PRODUCT)/lib$BTNESS; otherwise leave default LIB_SDIR as is.

TESTFILE = $(CERN_DIR)/lib$(BITNESS)/libpacklib.a
ifneq ($(wildcard $(TESTFILE)),) 
   LIB_SDIR  = lib$(BITNESS)
endif

# --------------------------------------------------
# define libraries


  LGSL    =  $(GSL_DIR)/$(LIB_SDIR)/libgsl.a  \
	     $(GSL_DIR)/$(LIB_SDIR)/libgslcblas.a
  IGSL    =  -I$(GSL_DIR)/include

  LCFITSIO =  -L$(CFITSIO_DIR)/$(LIB_SDIR) -lcfitsio
  ICFITSIO =  -I/$(CFITSIO_DIR)/include

# ---------------
ifeq ($(USE_HBOOK),0)
  LCERN  = 
else
  LCERN  = -L$(CERN_DIR)/$(LIB_SDIR) -lpacklib -lmathlib -lkernlib -lncurses
endif

# ----------------

# USE_ROOT flag affects the compilation of sntools_ouptut.c,
# and the -lstdc++  & root libraries for linking.

ifeq ($(USE_ROOT),0)
   CCoutput = cc
   CPPLIB   = 
   SNTOOLS_ROOT = 
else
   CCoutput    = c++ 
   CPPLIB      = -lstdc++
   CXXFLAGS    = -std=c++17
   IROOT       = -I/$(ROOT_DIR)/include -I/opt/local/include/freetype2
   ROOT_LIBDIR = $(LIB_SDIR)
   ROOT_LIBDIR = lib

# include lCint if it exists (root v5), and exclude if not (root v6)
   LCINT = -lCint
   LIBCINT_ROOT5 = $(ROOT_DIR)/$(ROOT_LIBDIR)/libCint.so
   ifeq (,$(wildcard $(LIBCINT_ROOT5)))
	LCINT = 
   endif	 

   LROOT = -L$(ROOT_DIR)/$(ROOT_LIBDIR) -lCore -lRIO -lNet -lHist -lGraf -lGraf3d -lGpad -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lThread -ldl $(LCINT)
   SNTOOLS_ROOT = $(SRC)/sntools_output_root.c 
endif

#echo " LIBINT_ROOT5 = $(LIBCINT_ROOT5) " ;

# Apr 2019: check for python codes
ifndef SNANA_PYTHON_DIR
  IPY = 
  LPY = 
else
  IPY = -I/$(SNANA_PYTHON_DIR)/include/python3.7m
  LPY = -L$(SNANA_PYTHON_DIR)/lib -ldl  -lutil -Wl,-rpath,$(SNANA_PYTHON_DIR)/lib -lpython3.7m
endif



# --------------------------------------------
# set compile flags.
ifeq ($(BITNESS),i686)
   SNFFLAGS  = -c -static -fno-automatic -fsecond-underscore $(EXTRA_FLAGS)
   SNCFLAGS  = -c -static -m64 $(EXTRA_FLAGS)
   SNLDFLAGS = -m64 -lg2c -lpthread $(PROFILEFLAG)
else
   SNFFLAGS  = -c -static -fno-automatic -m64  -fsecond-underscore $(EXTRA_FLAGS)
   SNCFLAGS  = -c -static -m64 $(EXTRA_FLAGS)
   SNLDFLAGS = -m64 -lpthread $(PROFILEFLAG)
endif


# From S. Rodney (May 2014):
# OSX returns i386 for uname -p, even when 64-bit, so fall back to uname -m
ifeq ($(OSNAME),Darwin)
   OSXBITNESS = $(shell uname -m)
ifeq ($(OSXBITNESS),x86_64)
   SNFFLAGS  = -c -static -fno-automatic -fsecond-underscore -m64
   SNCFLAGS  = -c -mdynamic-no-pic -m64
   SNLDFLAGS =
else
   SNFFLAGS  = -c -static -fno-automatic -fsecond-underscore -m64
   SNCFLAGS  = -c -mdynamic-no-pic -m64
   SNLDFLAGS =
endif
endif

UTIL = ../util
BIN  = ../bin
OBJ  = ../obj
SRC  = ../src
LIB  = ../lib
TMPANA = $(SRC)/tempana
TMPFIT = $(SRC)/tempfit


# --------------------------------------------

# define fortran pre-processor tools (from obsolete cernlib)
FPP_EXECUTABLES = $(BIN)/fcasplit

# Define snana executables 
SNANA_EXECUTABLES	=		\
	$(BIN)/snlc_sim.exe		\
	$(BIN)/snana.exe		\
	$(BIN)/snlc_fit.exe		\
	$(BIN)/psnid.exe		\
	$(BIN)/kcor.exe			\
	$(BIN)/kcordump.exe		\
	$(BIN)/nearnbr_maxFoM.exe	\
	$(BIN)/nearnbr_apply.exe	\
	$(BIN)/wfit.exe			\
	$(BIN)/SALT2mu.exe		\
	$(BIN)/combine_fitres.exe 	\
	$(BIN)/sntable_dump.exe 	\
	$(BIN)/sntable_combine.exe 	\
	$(BIN)/SIMSED_fudge.exe		\
	$(BIN)/SIMSED_extractSpec.exe	\
	$(BIN)/SIMSED_check.exe		\
	$(BIN)/SIMSED_rebin.exe		\
	$(BIN)/simlib_coadd.exe		\
	$(BIN)/unfold_snpar.exe

# ----------------------
# check for executables that depend explicitly on output format

ifeq ($(USE_HBOOK),1)
	HBOOK_EXECUTABLES = $(BIN)/merge_hbook.exe
else
	HBOOK_EXECUTABLES =
endif

ifeq ($(USE_ROOT),1)
	ROOT_EXECUTABLES = $(BIN)/merge_root.exe
else
	ROOT_EXECUTABLES = 
endif


EXECUTABLES = \
	$(SNANA_EXECUTABLES) 	\
	$(ROOT_EXECUTABLES) 	\
	$(HBOOK_EXECUTABLES)

# -------------------------------------
# Define list of object files for each program.

# start with lists that are used in multiple programs
OBJ_GENMAG_FIT	=		\
	$(OBJ)/genmag_stretch2.o \
	$(OBJ)/genmag_mlcs2k2.o \
	$(OBJ)/genmag_SALT2.o	\
	$(OBJ)/genmag_snoopy.o	\
	$(OBJ)/genmag_S11DM15.o	\
	$(OBJ)/genmag_SIMSED.o	\
	$(OBJ)/genmag_SEDtools.o

OBJ_GENMAG_SIM =	\
	$(OBJ_GENMAG_FIT) \
	$(OBJ)/genmag_NON1ASED.o \
	$(OBJ)/genmag_NON1AGRID.o \
	$(OBJ)/genmag_LCLIB.o	\
	$(OBJ)/genmag_PySEDMODEL.o

OBJ_SNTOOLS_SNANA	 = 	\
	$(OBJ)/sntools.o 	\
	$(OBJ)/sntools_nonlinearity.o  	\
	$(OBJ)/sntools_fluxErrModels.o	  \
	$(OBJ)/sntools_fluxErrModels_legacy.o	\
	$(OBJ)/sntools_fitsio.o	 \
	$(OBJ)/sntools_gridread.o \
	$(OBJ)/sntools_kcor.o \
	$(OBJ)/sntools_nearnbr.o \
	$(OBJ)/sntools_output.o  \
	$(OBJ)/minuit.o		\
	$(OBJ)/MWgaldust.o	\
	$(OBJ)/multiseason.o

# add forclose(): OBJ_OUTPUT = $(OBJ)/sntools_output.o  $(LIB)/libsnana.a
OBJ_OUTPUT = $(OBJ)/sntools_output.o

# now the program-specific lists

OBJ_SNANA	 = 	\
	$(OBJ)/snana.o	\
	$(OBJ_SNTOOLS_SNANA)

OBJ_SNFIT	 = 		\
	$(OBJ)/snlc_fit.o	\
	$(OBJ_SNTOOLS_SNANA)	\
	$(OBJ)/sntools_genSmear.o \
	$(OBJ_GENMAG_FIT)

OBJ_PSNID	=  		\
	$(OBJ)/psnid.o		\
	$(OBJ_SNTOOLS_SNANA)	\
	$(OBJ)/psnid_tools.o 	\
	$(OBJ)/psnid_BEST.o 	\
	$(OBJ)/psnid_BEST2.o

OBJ_SIM	 = 	\
	$(OBJ)/snlc_sim.o	\
	$(OBJ_SNTOOLS_SNANA)	\
	$(OBJ)/sntools_devel.o  \
	$(OBJ)/sntools_host.o   \
	$(OBJ)/sntools_weaklens.o  \
	$(OBJ)/sntools_stronglens.o  \
	$(OBJ)/sntools_wronghost.o   \
	$(OBJ)/sntools_genSmear.o  \
	$(OBJ)/sntools_trigger.o  \
	$(OBJ)/sntools_gridgen.o  \
	$(OBJ)/sntools_spectrograph.o \
	$(OBJ)/sntools_genPDF.o \
	$(OBJ)/sntools_genGauss_asym.o \
        $(OBJ)/sntools_genExpHalfGauss.o \
	$(OBJ)/inoue_igm.o \
	$(OBJ_GENMAG_SIM) 

# -------
# list of dependencies for sntools_output.o

SNTOOLS_OUTPUT = \
	$(SRC)/sntools_output.c \
	$(SRC)/sntools_output.h \
	$(SRC)/sntools_output_hbook.c \
	$(SRC)/sntools_output_marz.c \
	$(SRC)/sntools_output_text.c \
	$(SNTOOLS_ROOT)

# ------------------------------------------------------

LIBSNANA  =   $(LIB)/libsnana.a
LIBSNFIT  =   $(LIB)/libsnfit.a

CLEAN_FILES =  $(FPP_EXECUTABLES) $(LIBSNANA)  $(LIBSNFIT)  $(EXECUTABLES)

# --------------------------

all: set_Cpreproc_flags makeDirs $(FPP_EXECUTABLES) $(LIBSNANA)  $(LIBSNFIT)  $(EXECUTABLES)


install :
	@ $(if $(SNANA_INSTALL_DIR),,$(error error: You have not specified a destination directory))
	@ rm -rf $(INSTALL_DIR)
	@ mkdir  $(INSTALL_DIR)
	cp -p $(INSTALL_FILES) $(INSTALL_DIR)/

clean:
	rm -f $(CLEAN_FILES) $(OBJ)/*.o
	rm -rf $(TMPANA)
	rm -rf $(TMPFIT)

# -----------------------------------
# set define statements in sntools_output.c to pick HBOOK and/or ROOT
# based on existance of $CERN_DIR and $ROOT_DIR.
set_Cpreproc_flags :
	$(UTIL)/set_Cpreproc_flags.py

# May 3 2019: create blank dirs that are not in Git
makeDirs:
	mkdir -p $(OBJ)
	mkdir -p $(BIN)
	mkdir -p $(LIB)	

# ------------------------
# fcasplit (April 2014)

$(OBJ)/fcasplit.o : $(SRC)/fcasplit.F
	(cd $(OBJ);  $(FFC)  $(SNCFLAGS) $(SRC)/fcasplit.F ) 

$(BIN)/fcasplit : $(OBJ)/fcasplit.o 
	$(FFC) -o  $@ $(SNLDFLAGS) \
	$(OBJ)/fcasplit.o 
	(cd $(OBJ);  rm fcasplit.o ) 

$(OBJ)/minuit.o :  minuit.F
	(cd $(OBJ); \
	$(FFC) $(SNFFLAGS) $(SRC)/minuit.F)

# -----------------------------------------------------
#  cosmology fitter (from Alex Connelly, modified by G.Miknaitis & RK)

$(OBJ)/wfit.o : $(SRC)/wfit.c $(SRC)/sntools.c
	(cd $(OBJ);  $(CC)  $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/wfit.c ) 

$(BIN)/wfit.exe : $(OBJ)/wfit.o $(OBJ)/sntools.o
	$(FFC) -o  $@ $(SNLDFLAGS) \
	$(OBJ)/wfit.o  $(OBJ)/sntools.o \
	$(LCFITSIO)  \
	-lm $(LGSL) 
	(cd $(OBJ);  rm wfit.o )


# -----------------------------------------------------
#  MCMC cosmology fitter (Parkinson, Marriner)
#  Mar 2012: Finally just pure C code (no more f90)

$(OBJ)/sncosmo_mcmc.o : $(SRC)/sncosmo_mcmc.c $(SRC)/sntools.c
	(cd $(OBJ);  $(CC)  $(SNCFLAGS) $(SRC)/sncosmo_mcmc.c ) 

$(BIN)/sncosmo_mcmc.exe : $(OBJ)/sncosmo_mcmc.o $(OBJ)/sntools.o
	$(FFC) -o  $@ $(SNLDFLAGS) \
	$(OBJ)/sncosmo_mcmc.o  \
	$(OBJ)/sntools.o \
	$(OBJ)/sntools_output.o \
	$(LCERN) $(LROOT) -lm $(LGSL) 
	(cd $(OBJ);  rm sncosmo_mcmc.o ) 

# -------------------------------------------
# SALT2mu : convert SALT2 parameters (c,x1,x0) into distances

#$(OBJ)/sntools_eigen.o :  sntools_eigen.F
#	(cd $(OBJ); \
#	$(FFC) $(SNFFLAGS) $(SRC)/sntools_eigen.F)


$(OBJ)/SALT2mu.o : $(SRC)/SALT2mu.c $(SRC)/sntools.c $(SRC)/sntools_output.c $(SRC)/sntools_genPDF.c $(SRC)/minuit.F
	(cd $(OBJ);  $(CC)  $(SNCFLAGS) $(IGSL) $(ICFITSIO) $(SRC)/SALT2mu.c ) 

$(BIN)/SALT2mu.exe : $(OBJ)/SALT2mu.o  $(OBJ)/sntools.o $(OBJ)/sntools_output.o $(OBJ)/minuit.o
	$(FFC) -o  $@ $(SNLDFLAGS) \
	$(OBJ)/SALT2mu.o  \
	$(OBJ)/sntools.o \
	$(OBJ)/sntools_output.o \
	$(OBJ)/minuit.o 	\
	$(LCERN) $(LROOT) -lm $(LGSL) $(LCFITSIO) $(CPPLIB) -lpthread
	(cd $(OBJ);  rm SALT2mu.o ) 

# -----------------------------------------------------
# May 2006: 
#   make libsnana.a fortran library for access by C-code
#   Note that "main.o" is excluded from library
#

$(LIB)/libsnana.a:   snana.car
	for item in  snana ; do \
	    rm -f $$item.lnk; \
	    ln -s $(SRC)/$$item.car $$item.lnk; \
	done
	@ rm -rf $(TMPANA)
	mkdir $(TMPANA)
	$(UTIL)/ypatchy.pl - $(TMPANA)/snana.f snana.cra .go
	rm snana.lnk 
	(cd $(TMPANA); \
	    ../$(BIN)/fcasplit -f gfortran snana.f "$(SNFFLAGS)" " " ; \
	    echo "Compiling"; \
	    . ./snana.shfca; \
	)
	echo "Creating Library"; \
	rm -f $(TMPANA)/main.o
	ar cr $@ $(TMPANA)/*.o
	rm -f $(TMPANA)/*.o
	rm -f $(TMPANA)/*.f

# -------------------------------------------------
# May 15 2008:   make libsnfit.a 
#

$(LIB)/libsnfit.a:   snlc_fit.car snana.car
	for item in snana snlc_fit ; do \
	    rm -f $$item.lnk; \
	    ln -s $(SRC)/$$item.car $$item.lnk; \
	done
	@ rm -rf $(TMPFIT)
	mkdir $(TMPFIT)
	$(UTIL)/ypatchy.pl - $(TMPFIT)/snlc_fit.f snlc_fit.cra .go
	rm snana.lnk snlc_fit.lnk
	(cd $(TMPFIT); \
	    ../$(BIN)/fcasplit -f gfortran snlc_fit.f "$(SNFFLAGS)" " " ;  \
	    echo "Compiling"; \
	    .  ./snlc_fit.shfca; \
	)
	echo "Creating Library"; \
	rm -f $(TMPFIT)/main.o
	ar cr $@ $(TMPFIT)/*.o
	rm -f $(TMPFIT)/*.o
	rm -f $(TMPFIT)/*.f

# -------------------------------------------------
# SN analysis shell (reads DATA Files, makes cuts ...)

$(OBJ)/snana.o :  snana.f  
	(cd $(OBJ); $(FFC) $(SNFFLAGS) $(SRC)/snana.f)

snana.f : snana.cra  snana.cra snana.car  
	for item in snana ; do \
	    rm -f $$item.lnk; \
	    ln -s $(SRC)/$$item.car $$item.lnk; \
	done
	$(UTIL)/ypatchy.pl - $@ snana.cra .go
	rm snana.lnk

$(BIN)/snana.exe :  $(OBJ_SNANA)
	$(FFC) -o $@ $(SNLDFLAGS)  \
	$(OBJ_SNANA) \
	$(LCFITSIO)  $(LGSL) \
	$(LCERN) $(LROOT) -lm  $(CPPLIB)
	(cd $(OBJ); rm snana.o )	

# -------------------------------------------------
# SN light curve fitter 

$(OBJ)/snlc_fit.o :  snlc_fit.f 
	(cd $(OBJ); $(FFC) $(SNFFLAGS) $(SRC)/snlc_fit.f)

snlc_fit.f : snlc_fit.cra  snlc_fit.cra  snlc_fit.car snana.car 
	for item in  snana snlc_fit; do \
	    rm -f $$item.lnk; \
	    ln -s $(SRC)/$$item.car $$item.lnk; \
	done
	$(UTIL)/ypatchy.pl - $@ snlc_fit.cra .go
	rm snana.lnk  snlc_fit.lnk 

$(BIN)/snlc_fit.exe : $(OBJ_SNFIT)
	$(FFC) -o $@ $(SNLDFLAGS)  \
	$(OBJ_SNFIT) 	\
	$(LCFITSIO)  $(LGSL) 	\
	$(LCERN)  $(LROOT) -lm  $(CPPLIB)
	(cd $(OBJ); rm snlc_fit.o )

# -------------------------------------------------
# PSNID photometric classifier (Jun 2012)

$(OBJ)/psnid_tools.o : $(SRC)/psnid_tools.c $(SRC)/sntools.h $(SRC)/sntools_gridread.c
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/psnid_tools.c )

$(OBJ)/psnid_BEST.o : $(SRC)/psnid_BEST.c $(SRC)/sntools.h $(SRC)/sntools_gridread.c
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/psnid_BEST.c )


$(OBJ)/psnid_BEST2.o : $(SRC)/psnid_BEST2.c $(SRC)/sntools.h $(SRC)/sntools_gridread.c
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/psnid_BEST2.c )


$(OBJ)/psnid.o :  psnid.f
	(cd $(OBJ); $(FFC) $(SNFFLAGS) $(SRC)/psnid.f)

psnid.f : psnid.cra  psnid.cra  psnid.car  snana.car  snlc_fit.cra snlc_fit.car
	for item in  snana  snlc_fit psnid ; do \
	    rm -f $$item.lnk; \
	    ln -s $(SRC)/$$item.car $$item.lnk; \
	done
	$(UTIL)/ypatchy.pl - $@ psnid.cra .go
	rm snana.lnk snlc_fit.lnk psnid.lnk

$(BIN)/psnid.exe : $(OBJ_PSNID) 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ_PSNID) 		\
	$(LCFITSIO) $(LGSL) 	\
	$(LCERN)  $(LROOT) -lm  $(CPPLIB)
	(cd $(OBJ); rm psnid.o)

##	$(LIB)/libsnana.a  	\
# -------------------------------------------------
# K corrections and LC templates 

$(OBJ)/kcor.o : $(SRC)/kcor.c $(SRC)/kcor.h  $(SRC)/sntools_spectrograph.c
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(ICFITSIO)  $(IGSL) $(SRC)/kcor.c )

$(BIN)/kcor.exe : $(OBJ)/kcor.o $(OBJ)/sntools.o $(OBJ)/MWgaldust.o $(OBJ)/sntools_spectrograph.o $(OBJ)/sntools_fitsio.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/kcor.o $(OBJ)/sntools.o  $(OBJ)/MWgaldust.o \
	$(OBJ)/sntools_spectrograph.o $(OBJ)/sntools_fitsio.o \
	$(LCFITSIO)  $(LGSL) $(LCERN)
	(cd $(OBJ); rm kcor.o )

# -------------------------------------------------
# kcordump program

$(OBJ)/kcordump.o :  kcordump.f
	(cd $(OBJ); $(FFC) $(SNFFLAGS) $(IGSL) $(SRC)/kcordump.f)

kcordump.f : kcordump.cra  kcordump.cra 
	ln -s $(SRC)/snana.car snana.lnk
	$(UTIL)/ypatchy.pl - $@ kcordump.cra .go
	rm snana.lnk

$(BIN)/kcordump.exe : $(OBJ)/kcordump.o $(OBJ)/MWgaldust.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/kcordump.o 	\
	$(LIB)/libsnana.a  	\
	$(LCFITSIO)  $(LGSL) 	\
	$(LCERN)  -lm
	(cd $(OBJ); rm kcordump.o)

# -------------------------------------------------
# combine_fitres (C-version with no array limits)

$(OBJ)/combine_fitres.o :  $(SRC)/combine_fitres.c
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) $(SRC)/combine_fitres.c )

$(BIN)/combine_fitres.exe : \
	$(OBJ)/combine_fitres.o $(OBJ)/sntools.o  $(OBJ)/sntools_output.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/combine_fitres.o \
	$(OBJ)/sntools.o  	\
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO) -lm $(CPPLIB)
	(cd $(OBJ); rm combine_fitres.o )

# --------------------
# sntable_dump (Apr 2013)

$(OBJ)/sntable_dump.o : $(SRC)/sntable_dump.c $(SNTOOLS_OUTPUT)
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) \
	$(SRC)/sntable_dump.c )

$(BIN)/sntable_dump.exe :  \
	$(OBJ)/sntable_dump.o $(OBJ)/sntools.o  $(OBJ)/sntools_output.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/sntable_dump.o 	\
	$(OBJ)/sntools.o  	\
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO) -lm $(CPPLIB)
	(cd $(OBJ); rm sntable_dump.o )


# --------------------
# sntable_combine (Jan 2017)

$(OBJ)/sntable_combine.o : $(SRC)/sntable_combine.c $(SNTOOLS_OUTPUT)
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) \
	$(SRC)/sntable_combine.c )

$(BIN)/sntable_combine.exe :  \
	$(OBJ)/sntable_combine.o $(OBJ)/sntools.o  $(OBJ)/sntools_output.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/sntable_combine.o 	\
	$(OBJ)/sntools.o  	\
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO) -lm $(CPPLIB)
	(cd $(OBJ); rm sntable_combine.o )

# --------------------
# nearnbr_maxFoM (Jun 2013)
# Link to libsnana.a to get forclose(LUN) wrapper

$(OBJ)/nearnbr_maxFoM.o : $(SRC)/nearnbr_maxFoM.c $(SNTOOLS_OUTPUT)
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) \
	$(SRC)/nearnbr_maxFoM.c )

$(BIN)/nearnbr_maxFoM.exe :  \
	$(OBJ)/nearnbr_maxFoM.o $(OBJ)/sntools.o  $(OBJ)/sntools_output.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/nearnbr_maxFoM.o \
	$(OBJ)/sntools.o  	\
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO)  -lm $(CPPLIB)
	(cd $(OBJ); rm nearnbr_maxFoM.o )

# --------------------
# nearnbr_apply (Jan 2017)

$(OBJ)/nearnbr_apply.o : $(SRC)/nearnbr_apply.c $(SNTOOLS_OUTPUT)
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO)  \
	$(SRC)/nearnbr_apply.c )

$(BIN)/nearnbr_apply.exe :  \
	$(OBJ)/nearnbr_apply.o $(OBJ)/sntools.o  $(OBJ)/sntools_output.o  $(OBJ)/sntools_nearnbr.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/nearnbr_apply.o \
	$(OBJ)/sntools.o  	\
	$(OBJ)/sntools_nearnbr.o \
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO) -lm $(CPPLIB)
	(cd $(OBJ); rm nearnbr_apply.o )


# -------------------------------------------------
# compile sntools (.o only)

$(OBJ)/sntools.o : $(SRC)/sntools.c $(SRC)/sntools.h $(SRC)/sndata.h 
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/sntools.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools.o

# -------------------------------------------------
# compile sntools_genSmear (.o only)

$(OBJ)/sntools_genSmear.o : $(SRC)/sntools_genSmear.c $(SRC)/sntools_genSmear.h $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/sntools_genSmear.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_genSmear.o

# -------------------------------------------------
# Apr 26 2016: non-linearity package

$(OBJ)/sntools_nonlinearity.o : $(SRC)/sntools_nonlinearity.c $(SRC)/sntools_nonlinearity.h $(SRC)/sndata.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_nonlinearity.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_nonlinearity.o

# -------------------------------------------------
# Oct 2015: fluxErr model

$(OBJ)/sntools_fluxErrModels.o : $(SRC)/sntools_fluxErrModels.c $(SRC)/sntools_fluxErrModels.h $(SRC)/sndata.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_fluxErrModels.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_fluxErrModels.o


$(OBJ)/sntools_fluxErrModels_legacy.o : $(SRC)/sntools_fluxErrModels_legacy.c $(SRC)/sntools_fluxErrModels_legacy.h $(SRC)/sndata.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_fluxErrModels_legacy.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_fluxErrModels_legacy.o

# -------------------------------------------------
# compile sntools_fitsio (.o only)

$(OBJ)/sntools_fitsio.o : $(SRC)/sntools_fitsio.c $(SRC)/sntools_fitsio.h $(SRC)/sndata.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(SRC)/sntools_fitsio.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_fitsio.o

$(OBJ)/sntools_kcor.o : $(SRC)/sntools_kcor.c $(SRC)/sntools_kcor.h $(SRC)/sndata.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(SRC)/sntools_kcor.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_kcor.o


$(OBJ)/sntools_gridgen.o : $(SRC)/sntools_gridgen.c $(SRC)/sntools_grid.h $(SRC)/sndata.h $(SRC)/snlc_sim.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(SRC)/sntools_gridgen.c )

$(OBJ)/sntools_gridread.o : $(SRC)/sntools_gridread.c $(SRC)/sntools_grid.h $(SRC)/sndata.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(SRC)/sntools_gridread.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_gridread.o

# -------------------------------------------------
# compile sntools_host (.o only)

$(OBJ)/sntools_host.o : $(SRC)/sntools_host.c  $(SRC)/sntools_host.h $(SRC)/snlc_sim.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_host.c )


# -------------------------------------------------
# compile sntools_devel (.o only)

$(OBJ)/sntools_devel.o : $(SRC)/sntools_devel.c  $(SRC)/sntools_devel.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_devel.c )

# -------------------------------------------------
# compile sntools_weaklens (.o only)

$(OBJ)/sntools_weaklens.o : $(SRC)/sntools_weaklens.c  $(SRC)/sntools_weaklens.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_weaklens.c )

# -------------------------------------------------
# compile sntools_stronglens (.o only)

$(OBJ)/sntools_stronglens.o : $(SRC)/sntools_stronglens.c  $(SRC)/sntools_stronglens.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_stronglens.c )

# -------------------------------------------------
# compile inoue_igm.o 

$(OBJ)/inoue_igm.o : $(SRC)/inoue_igm.c  $(SRC)/inoue_igm.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/inoue_igm.c )

# -------------------------------------------------
# compile sntools_wronghost (.o only)

$(OBJ)/sntools_wronghost.o : $(SRC)/sntools_wronghost.c  $(SRC)/sntools_wronghost.h $(SRC)/snlc_sim.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/sntools_wronghost.c )


# -------------------------------------------------
# compile sntools_trigger (.o only)
$(OBJ)/sntools_trigger.o : $(SRC)/sntools_trigger.c  $(SRC)/sntools_trigger.h  $(SRC)/snlc_sim.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(IGSL) $(SRC)/sntools_trigger.c )


# -------------------------------------------------
# compile sntools_spectrograph (.o only)
$(OBJ)/sntools_spectrograph.o : $(SRC)/sntools_spectrograph.c  $(SRC)/sntools_spectrograph.h  $(SRC)/kcor.h $(SRC)/kcor.c
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(SRC)/sntools_spectrograph.c )

# -------------------------------------------------
# compile sntools_nearnbr (.o only)

$(OBJ)/sntools_nearnbr.o : $(SRC)/sntools_nearnbr.c $(SRC)/sntools_nearnbr.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(SRC)/sntools_nearnbr.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/sntools_nearnbr.o

$(OBJ)/kdtree.o : $(SRC)/kdtree.c $(SRC)/kdtree.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(SRC)/kdtree.c )
	ar r $(LIB)/libsnana.a  $(OBJ)/kdtree.o

# -------------------------------------------------
# compile sntools_output (.o only)

$(OBJ)/sntools_output.o : $(SNTOOLS_OUTPUT)
	(cd $(OBJ); \
	$(CCoutput) $(CXXFLAGS) $(SNCFLAGS) $(IROOT) $(ICFITSIO) $(SRC)/sntools_output.c )

# -------------------------------------------------
#   MWgaldust from D.Cinabro (.o only)

$(OBJ)/MWgaldust.o : $(SRC)/MWgaldust.c 
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(SRC)/MWgaldust.c )

# -------------------------------------------------
#  multiseason toolkit (Oct 2014)

$(OBJ)/multiseason.o : $(SRC)/multiseason.c 
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(SRC)/multiseason.c )


# -------------------------------------------------
#  sntools_genPDF  tools (Jun 2020)

$(OBJ)/sntools_genPDF.o : $(SRC)/sntools_genPDF.c  $(SRC)/sntools_genPDF.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(IGSL) $(SRC)/sntools_genPDF.c )

# -------------------------------------------------
#  sntools_genGauss_asym  tools (Sep 2016)

$(OBJ)/sntools_genGauss_asym.o : $(SRC)/sntools_genGauss_asym.c  $(SRC)/sntools_genGauss_asym.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(IGSL) $(SRC)/sntools_genGauss_asym.c )

# -------------------------------------------------        
#  sntools_genExpHalfGauss  tools (March 2020)                                         

$(OBJ)/sntools_genExpHalfGauss.o : $(SRC)/sntools_genExpHalfGauss.c  $(SRC)/sntools_genExpHalfGauss.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(IGSL) $(SRC)/sntools_genExpHalfGauss.c )

# ------------------------------------------------
# compile genmag_xxxx functions (.o only

$(OBJ)/genmag_stretch2.o : $(SRC)/genmag_stretch2.c $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(SRC)/genmag_stretch2.c )

$(OBJ)/genmag_mlcs2k2.o : $(SRC)/genmag_mlcs2k2.c  $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS)  $(SRC)/genmag_mlcs2k2.c )

$(OBJ)/genmag_SEDtools.o : $(SRC)/genmag_SEDtools.c  $(SRC)/genmag_SEDtools.c 
	(cd $(OBJ); \
	$(CC)  $(SNCFLAGS) $(SRC)/genmag_SEDtools.c )

$(OBJ)/genmag_SALT2.o : $(SRC)/genmag_SALT2.c  $(SRC)/genmag_SEDtools.c
	(cd $(OBJ); \
	$(CC)  $(SNCFLAGS) $(IGSL) $(SRC)/genmag_SALT2.c )

$(OBJ)/genmag_SIMSED.o : $(SRC)/genmag_SIMSED.c  $(SRC)/genmag_SEDtools.c 
	(cd $(OBJ); \
	$(CC)  $(SNCFLAGS) $(SRC)/genmag_SIMSED.c )

$(OBJ)/genmag_PySEDMODEL.o : $(SRC)/genmag_PySEDMODEL.c  $(SRC)/genmag_SEDtools.c 
	(cd $(OBJ); \
	$(CC)  $(SNCFLAGS) $(IPY) $(SRC)/genmag_PySEDMODEL.c )

$(OBJ)/genmag_snoopy.o : $(SRC)/genmag_snoopy.c  $(SRC)/genmag_snoopy.h $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/genmag_snoopy.c )

$(OBJ)/genmag_S11DM15.o : $(SRC)/genmag_S11DM15.c  $(SRC)/genmag_S11DM15.h $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(SRC)/genmag_S11DM15.c )

$(OBJ)/genmag_NON1ASED.o : $(SRC)/genmag_NON1ASED.c  $(SRC)/sntools.h  $(SRC)/snlc_sim.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/genmag_NON1ASED.c )

$(OBJ)/genmag_NON1AGRID.o : $(SRC)/genmag_NON1AGRID.c  $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL)  $(SRC)/genmag_NON1AGRID.c )

$(OBJ)/genmag_LCLIB.o : $(SRC)/genmag_LCLIB.c  $(SRC)/sntools.h
	(cd $(OBJ); \
	$(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL)  $(SRC)/genmag_LCLIB.c )

# -------------------------------------------------
# Generic Lightcurve simulator 
# $(SRC)/sntools_genPDF.c

$(OBJ)/snlc_sim.o : $(SRC)/snlc_sim.c $(SRC)/sntools_gridgen.c \
	$(SRC)/sntools_fitsio.c $(SRC)/sntools_host.c $(SRC)/sntools_genPDF.c \
	$(SRC)/sntools_wronghost.c  $(SRC)/sntools_host.h \
	$(SRC)/sntools_genSmear.c $(SRC)/SNcadenceFoM.c  \
	$(SRC)/snlc_sim.h $(SRC)/sndata.h $(SRC)/sntools_kcor.c
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) $(IPY) $(SRC)/snlc_sim.c )

$(BIN)/snlc_sim.exe : $(OBJ_SIM)  $(LIB)/libsnana.a
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ_SIM)	  	\
	$(LIB)/libsnana.a  	\
	$(LCFITSIO) $(LGSL)  	\
	$(LPY)  $(LCERN) $(LROOT)  -lm  $(CPPLIB)
	(cd $(OBJ); rm snlc_sim.o)

# -------------------------------------------------
# program to compact the SIMLIB into one measure per night

$(OBJ)/simlib_coadd.o : $(SRC)/simlib_coadd.c $(SRC)/simlib_tools.c
	(cd $(OBJ); $(CC) $(SNCFLAGS)  $(SRC)/simlib_coadd.c )

$(BIN)/simlib_coadd.exe : \
	$(OBJ)/simlib_coadd.o $(OBJ)/MWgaldust.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/simlib_coadd.o  \
	$(OBJ)/sntools.o \
	$(OBJ)/MWgaldust.o \
	$(LGSL) 
	(cd $(OBJ); rm simlib_coadd.o )

# ---------------------------------------
# merge_hbook.exe program (to replace hmerge.exe)
$(OBJ)/merge_hbook.o :  merge_hbook.F
	(cd $(OBJ); $(FFC) $(SNFFLAGS) $(SRC)/merge_hbook.F)

$(BIN)/merge_hbook.exe : $(OBJ)/merge_hbook.o 
	$(FFC) -o $@ $(SNLDFLAGS) $(OBJ)/merge_hbook.o  $(LCERN)
	(cd $(OBJ); rm merge_hbook.o )


# merge_root.exe program (Apr 2013)

$(OBJ)/merge_root.o : $(SRC)/merge_root.c $(SNTOOLS_OUTPUT) 
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) \
	$(SRC)/merge_root.c )

$(BIN)/merge_root.exe :  \
	$(OBJ)/merge_root.o $(OBJ)/sntools.o  $(OBJ)/sntools_output.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/merge_root.o 	\
	$(OBJ)/sntools.o  	\
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO) -lm $(CPPLIB)
	(cd $(OBJ); rm merge_root.o )

# -------------
# sim filter-calib

$(OBJ)/filtercal_sim.o : $(SRC)/filtercal_sim.c
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(SRC)/filtercal_sim.c )

$(BIN)/filtercal_sim.exe : \
	$(OBJ)/filtercal_sim.o  $(OBJ)/sntools.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/filtercal_sim.o  $(OBJ)/sntools.o $(LCERN)  -lm $(LGSL)
	(cd $(OBJ); rm filtercal_sim.o )

# -------------
# SIMSED_fudge

$(OBJ)/SIMSED_fudge.o : $(SRC)/SIMSED_fudge.c $(SRC)/genmag_SIMSED.c 
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(ICFITSIO) $(IGSL) $(SRC)/SIMSED_fudge.c )

$(BIN)/SIMSED_fudge.exe : \
	$(OBJ)/SIMSED_fudge.o  $(OBJ)/sntools.o  $(OBJ)/sntools_genSmear.o \
	$(OBJ)/genmag_SEDtools.o  $(OBJ)/genmag_SIMSED.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/SIMSED_fudge.o  \
	$(OBJ)/sntools.o  \
	$(OBJ)/genmag_SEDtools.o \
	$(OBJ)/genmag_SIMSED.o   \
	$(OBJ)/genmag_SALT2.o   \
	$(OBJ)/sntools_genSmear.o \
	$(OBJ)/MWgaldust.o \
	$(LIB)/libsnana.a  \
	-lm $(LCFITSIO) $(LGSL) $(LCERN)
	(cd $(OBJ); rm SIMSED_fudge.o )

# -------------
# SIMSED_extractSpec
# Extract a single interpolated SED for SIMSED version, 
# epoch, and parameter-list

$(OBJ)/SIMSED_extractSpec.o : $(SRC)/SIMSED_extractSpec.c \
	$(SRC)/genmag_SEDtools.c	
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(SRC)/SIMSED_extractSpec.c )

$(BIN)/SIMSED_extractSpec.exe : \
	$(OBJ)/SIMSED_extractSpec.o  \
	$(OBJ)/sntools.o  $(OBJ)/genmag_SEDtools.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/SIMSED_extractSpec.o  \
	$(OBJ)/sntools.o  \
	$(OBJ)/MWgaldust.o  \
	$(OBJ)/genmag_SEDtools.o  \
	-lm $(LGSL)
	(cd $(OBJ); rm SIMSED_extractSpec.o )

# -------------
# SIMSED_rebin (May 31 2018)

$(OBJ)/SIMSED_rebin.o : $(SRC)/SIMSED_rebin.c \
	$(SRC)/genmag_SEDtools.c	
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(SRC)/SIMSED_rebin.c )

$(BIN)/SIMSED_rebin.exe : \
	$(OBJ)/SIMSED_rebin.o  \
	$(OBJ)/sntools.o  $(OBJ)/genmag_SEDtools.o 
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/SIMSED_rebin.o  \
	$(OBJ)/sntools.o  \
	$(OBJ)/MWgaldust.o  \
	$(OBJ)/genmag_SEDtools.o  \
	-lm $(LGSL)
	(cd $(OBJ); rm SIMSED_rebin.o )

# -------------
# SIMSED_check

$(OBJ)/SIMSED_check.o : $(SRC)/SIMSED_check.c \
	$(SRC)/genmag_SEDtools.c
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(SRC)/SIMSED_check.c )

$(BIN)/SIMSED_check.exe : \
	$(OBJ)/SIMSED_check.o  \
	$(OBJ)/sntools.o  $(OBJ)/genmag_SEDtools.o $(OBJ)/genmag_SIMSED.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/SIMSED_check.o  \
	$(OBJ)/sntools.o  \
	$(OBJ)/MWgaldust.o  \
	$(OBJ)/genmag_SEDtools.o  \
	$(OBJ)/genmag_SIMSED.o  \
	-lm $(LGSL)
	(cd $(OBJ); rm SIMSED_check.o )

# -------------
# simualate effects of atmosphere

$(OBJ)/atmosphere_sim.o : $(SRC)/atmosphere_sim.c 
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(SRC)/atmosphere_sim.c )

$(BIN)/atmosphere_sim.exe : \
	$(OBJ)/atmosphere_sim.o  $(OBJ)/sntools.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/atmosphere_sim.o	\
	$(OBJ)/sntools.o 	\
	$(OBJ_OUTPUT)		\
	$(LCERN) $(LROOT)  -lm $(LGSL)
	(cd $(OBJ); rm atmosphere_sim.o )

# -------------
# unfold_snpar

$(OBJ)/unfold_snpar.o : $(SRC)/unfold_snpar.c
	(cd $(OBJ); $(CC) $(SNCFLAGS) $(IGSL) $(ICFITSIO) $(SRC)/unfold_snpar.c )

$(BIN)/unfold_snpar.exe : $(OBJ)/unfold_snpar.o  $(OBJ)/sntools.o $(OBJ)/sntools_output.o
	$(FFC) -o $@ $(SNLDFLAGS) \
	$(OBJ)/unfold_snpar.o	\
	$(OBJ)/sntools.o 	\
	$(OBJ_OUTPUT)		\
	$(LGSL) $(LCERN) $(LROOT) $(LCFITSIO) -lm $(CPPLIB) 
	(cd $(OBJ); rm unfold_snpar.o )

####################  END ##########################################

